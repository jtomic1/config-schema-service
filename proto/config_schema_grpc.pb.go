// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: config_schema.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigSchemaService_SaveConfigSchema_FullMethodName = "/configschema.ConfigSchemaService/SaveConfigSchema"
)

// ConfigSchemaServiceClient is the client API for ConfigSchemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigSchemaServiceClient interface {
	SaveConfigSchema(ctx context.Context, in *ConfigSchemaSaveRequest, opts ...grpc.CallOption) (*ConfigSchemaSaveResponse, error)
}

type configSchemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSchemaServiceClient(cc grpc.ClientConnInterface) ConfigSchemaServiceClient {
	return &configSchemaServiceClient{cc}
}

func (c *configSchemaServiceClient) SaveConfigSchema(ctx context.Context, in *ConfigSchemaSaveRequest, opts ...grpc.CallOption) (*ConfigSchemaSaveResponse, error) {
	out := new(ConfigSchemaSaveResponse)
	err := c.cc.Invoke(ctx, ConfigSchemaService_SaveConfigSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSchemaServiceServer is the server API for ConfigSchemaService service.
// All implementations must embed UnimplementedConfigSchemaServiceServer
// for forward compatibility
type ConfigSchemaServiceServer interface {
	SaveConfigSchema(context.Context, *ConfigSchemaSaveRequest) (*ConfigSchemaSaveResponse, error)
	mustEmbedUnimplementedConfigSchemaServiceServer()
}

// UnimplementedConfigSchemaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigSchemaServiceServer struct {
}

func (UnimplementedConfigSchemaServiceServer) SaveConfigSchema(context.Context, *ConfigSchemaSaveRequest) (*ConfigSchemaSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfigSchema not implemented")
}
func (UnimplementedConfigSchemaServiceServer) mustEmbedUnimplementedConfigSchemaServiceServer() {}

// UnsafeConfigSchemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigSchemaServiceServer will
// result in compilation errors.
type UnsafeConfigSchemaServiceServer interface {
	mustEmbedUnimplementedConfigSchemaServiceServer()
}

func RegisterConfigSchemaServiceServer(s grpc.ServiceRegistrar, srv ConfigSchemaServiceServer) {
	s.RegisterService(&ConfigSchemaService_ServiceDesc, srv)
}

func _ConfigSchemaService_SaveConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSchemaSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSchemaServiceServer).SaveConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSchemaService_SaveConfigSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSchemaServiceServer).SaveConfigSchema(ctx, req.(*ConfigSchemaSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigSchemaService_ServiceDesc is the grpc.ServiceDesc for ConfigSchemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigSchemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configschema.ConfigSchemaService",
	HandlerType: (*ConfigSchemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveConfigSchema",
			Handler:    _ConfigSchemaService_SaveConfigSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_schema.proto",
}
